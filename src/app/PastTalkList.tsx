"use client";
import styled from "@emotion/styled";
import { groupBy } from "ramda";
import { PastTalkDate } from "./PastTalkDate";
import { ShareSocialLinks } from "./ShareSocialLinks";
import { TalkCard } from "./TalkCard";

// Generated by https://quicktype.io

export interface Talk {
  title: string;
  date: string;
  createdAt: string;
  updatedAt: string;
  publishedAt: string;
  speaker: Speaker;
  cover: Cover;
  references: Reference[];
}

export interface Cover {
  data: CoverData | null;
}

export interface CoverData {
  id: number;
  attributes: PurpleAttributes;
}

export interface PurpleAttributes {
  name: string;
  alternativeText: null;
  caption: null;
  width: number;
  height: number;
  formats: Formats;
  hash: string;
  ext: EXT;
  mime: MIME;
  size: number;
  url: string;
  previewUrl: null;
  provider: string;
  provider_metadata: ProviderMetadata;
  createdAt: string;
  updatedAt: string;
}

export enum EXT {
  PNG = ".png",
}

export interface Formats {
  large: Large;
  small: Large;
  medium: Large;
  thumbnail: Large;
}

export interface Large {
  ext: EXT;
  url: string;
  hash: string;
  mime: MIME;
  name: string;
  path: null;
  size: number;
  width: number;
  height: number;
  provider_metadata: ProviderMetadata;
}

export enum MIME {
  ImagePNG = "image/png",
}

export interface ProviderMetadata {
  public_id: string;
  resource_type: ResourceType;
}

export enum ResourceType {
  Image = "image",
}

export interface Reference {
  id: number;
  type?: string;
  icon: keyof ShareSocialLinks;
  link?: string;
}

export interface Speaker {
  data: SpeakerData;
}

export interface SpeakerData {
  id: number;
  attributes: FluffyAttributes;
}

export interface FluffyAttributes {
  name: string;
  pic: string;
  createdAt: string;
  updatedAt: string;
  publishedAt: string;
  social: Social;
}

export interface Social {
  id: number;
  twitter: string;
  linkedIn?: string;
}

const PastTalkListContainer = styled.div`
  /* width: max-content; */
  display: grid;
  grid-template-columns: 1fr;
  justify-items: center;
  gap: 1rem;
  row-gap: 3rem;
  position: relative;
  margin: 3rem 0px;

  @media (min-width: 600px) {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(445px, 1fr));
    align-items: start;
  }

  @media (min-width: 1000px) {
    justify-items: initial;
  }
`;

export function PastTalkList({ talkList }: { talkList: Talk[] }) {
  const talks = talkList;
  // console.log("✨✨", talks);

  let talksDateGrouped = groupBy((data: Talk) => data.date)(talks);

  console.log("✨✨", talksDateGrouped);
  return (
    <>
      {Object.keys(talksDateGrouped).map((date, index) => (
        <PastTalkListContainer key={index}>
          <PastTalkDate date={date} />
          {talksDateGrouped[date].map((talk, index) => (
            <TalkCard key={index} talk={talk} />
          ))}
        </PastTalkListContainer>
      ))}
    </>
  );
}
